import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, map, catchError, switchMap, of, timeout, throwError } from 'rxjs';
import { Contact, ContactFormData } from '../models/contact.model';
import { ContactMapper, ApiResponseHandler } from '../utils';

@Injectable({
  providedIn: 'root'
})
export class ContactService {
  private apiUrl = 'http://localhost:5270/api/Kisiler';

  constructor(private http: HttpClient) { }

  getAllContacts(): Observable<Contact[]> {
    console.log('T√ºm ki≈üiler alƒ±nƒ±yor...');
    return this.http.get<any[]>(this.apiUrl).pipe(
      map(apiContacts => {
        console.log('Backend\'den gelen ham veri:', apiContacts);
        
        if (!Array.isArray(apiContacts)) {
          console.error('Backend d√ºzg√ºn array d√∂nd√ºrmedi:', apiContacts);
          return [];
        }

        const mappedContacts = apiContacts.map(apiContact => {
          // Backend'ten gelen t√ºm alanlarƒ± debug i√ßin listele
          console.log('üëÄ Ham API verisi (bir ki≈üi):', apiContact);
          console.log('üîç IsFavori alanƒ± (b√ºy√ºk I):', apiContact.IsFavori);
          console.log('üîç isFavori alanƒ± (k√º√ß√ºk i):', apiContact.isFavori);
          console.log('üîç Object.keys:', Object.keys(apiContact));
          
          const mapped = ContactMapper.mapApiContactToContact(apiContact);
          console.log(`‚ú® ${mapped.firstName} ${mapped.lastName}: Mapping sonucu isFavorite=${mapped.isFavorite}`);
          return mapped;
        });

        console.log('Toplam ki≈üi sayƒ±sƒ±:', mappedContacts.length);
        console.log('Favori ki≈üi sayƒ±sƒ±:', mappedContacts.filter(c => c.isFavorite).length);
        return mappedContacts;
      })
    );
  }

  getContactById(id: number): Observable<Contact> {
    console.log(`ID ${id} ile ki≈üi alƒ±nƒ±yor...`);
    return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(
      map(apiContact => {
        if (!apiContact) {
          throw new Error('Contact not found');
        }

        const mapped = ContactMapper.mapApiContactToContact(apiContact);
        console.log(`Ki≈üi detayƒ± ${mapped.firstName} ${mapped.lastName}: isFavorite=${mapped.isFavorite}`);
        return mapped;
      })
    );
  }

  addContact(contact: ContactFormData): Observable<Contact> {
    console.log('Yeni ki≈üi ekleniyor:', contact);
    
    const apiContact = ContactMapper.mapContactFormDataToApiContact(contact);
    ApiResponseHandler.logApiRequest('Ki≈üi ekleme', apiContact);

    return this.http.post<any>(this.apiUrl, apiContact).pipe(
      map(apiContact => ApiResponseHandler.processApiResponse(apiContact, 'Ki≈üi ekleme'))
    );
  }

  updateContact(id: number, updatedContact: Partial<ContactFormData>): Observable<Contact> {
    console.log(`ID ${id} ki≈üi g√ºncelleniyor:`, updatedContact);
    
    const apiContact = ContactMapper.mapPartialContactFormDataToApiContact(updatedContact, id);
    ApiResponseHandler.logApiRequest('Ki≈üi g√ºncelleme', apiContact);

    return this.http.put<any>(`${this.apiUrl}/${id}`, apiContact).pipe(
      map(apiContact => {
        console.log('G√ºncelleme backend yanƒ±tƒ±:', apiContact);
        
        // Backend bo≈ü yanƒ±t d√∂nd√ºr√ºrse, g√ºncellenmi≈ü veriyi kendimiz olu≈ütur
        if (!apiContact) {
          return ContactMapper.createLocalContact(id, updatedContact);
        }

        const mapped = ContactMapper.mapApiContactToContact(apiContact);
        console.log(`Ki≈üi g√ºncellendi: ${mapped.firstName} ${mapped.lastName}, isFavorite=${mapped.isFavorite}`);
        return mapped;
      })
    );
  }

  deleteContact(id: number): Observable<void> {
    console.log(`ID ${id} ki≈üi siliniyor...`);
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }

  toggleFavorite(id: number, isFavorite: boolean): Observable<Contact> {
    console.log(`ID ${id} ki≈üinin favori durumu deƒüi≈ütiriliyor: ${!isFavorite} ‚Üí ${isFavorite}`);
    
    // Backend'in beklediƒüi basit format - sadece favori durumunu g√∂nder
    const favoritePayload = { favori: isFavorite };
    ApiResponseHandler.logApiRequest('Favori deƒüi≈üikliƒüi', favoritePayload);

    return this.http.patch<any>(`${this.apiUrl}/${id}`, favoritePayload).pipe(
      timeout(10000), // 10 saniye timeout
      catchError((error: HttpErrorResponse) => {
        console.error('‚ùå PATCH request hatasƒ±:', error);
        if (error.status === 0) {
          console.error('üîå Sunucu baƒülantƒ±sƒ± yok veya CORS hatasƒ±');
        } else if (error.status === 400) {
          console.error('üìù Veri formatƒ± hatasƒ± (400 Bad Request)');
          console.error('üì§ G√∂nderilen veri:', favoritePayload);
        } else if (error.status === 404) {
          console.error('üîç Ki≈üi bulunamadƒ± (404 Not Found)');
        }
        return throwError(() => error);
      }),
      map(apiContact => {
        const mappedContact = ApiResponseHandler.processApiResponse(apiContact, 'Favori g√ºncelleme');
        console.log(`‚úÖ Favori durumu ba≈üarƒ±yla g√ºncellendi: ${mappedContact.firstName} ${mappedContact.lastName} = ${mappedContact.isFavorite}`);
        return mappedContact;
      }),
      catchError((error) => {
        console.error('‚ùå toggleFavorite genel hatasƒ±:', error);
        return throwError(() => error);
      })
    );
  }
}
